<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Apereo under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Apereo licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd
        http://www.liquibase.org/xml/ns/dbchangelog-ext
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

    <property name="schema" value="${database.schema}" />
    <property name="nvarchar.type" value="character varying" dbms="postgresql" />
    <property name="nvarchar.type" value="nvarchar" dbms="mssql" />

    <changeSet id="add participation success indicator" author="paul.spaude">
        <insert tableName="success_indicator">
            <column name="id" value="ff8777e5-cabf-4237-bf42-0500c39ec8dc" />
            <column name="model_code" value="system.intervention" />
            <column name="model_name" value="Intervention Indicators" />
            <column name="indicator_group" value="INTERVENTION" />
            <column name="code" value="system.intervention.participation" />
            <column name="name" value="Participation" />
            <column name="description" value="Lowest course participation in current schedule" />
            <column name="instruction" value="Shows the lowest value found in external student transcript course table for the current term using the participation value. " />
            <column name="evaluation_type" value="SCALE" />
            <column name="scale_evaluation_high_from" value="85.00" />
            <column name="scale_evaluation_high_to" value="100.00" />
            <column name="scale_evaluation_medium_from" value="50.00" />
            <column name="scale_evaluation_medium_to" value="84.999" />
            <column name="scale_evaluation_low_from" value="0.00" />
            <column name="scale_evaluation_low_to" value="49.999" />

            <!-- leave these null and rely on defaults -->
            <!--column name="string_evaluation_high" value="" /--> <!-- leave null -->
            <!--<column name="string_evaluation_medium" value="" />--> <!-- leave null -->
            <!--column name="string_evaluation_low" value="" /--> <!-- leave null -->

            <!-- Shouldn't happen -->
            <column name="no_data_exists_evaluation" value="DEFAULT" />
            <!-- Redundant since default low_to has no value -->
            <column name="no_data_matches_evaluation" value="DEFAULT" />
            <column name="sort_order" value="90" />

            <column name="created_date" valueDate="2016-10-21T12:00:00" />
            <column name="modified_date" valueDate="2016-10-21T12:00:00" />
            <column name="created_by" value="58ba5ee3-734e-4ae9-b9c5-943774b4de41" />
            <column name="modified_by" value="58ba5ee3-734e-4ae9-b9c5-943774b4de41" />
            <column name="object_status" value="1" />
        </insert>
    </changeSet>

    <changeSet id="Add boolean columns to success indicators" author="paul.spaude">
        <addColumn tableName="success_indicator">
            <column name="show_in_caseload" type="boolean" defaultValue="false">
                <constraints nullable="false" />
            </column>
        </addColumn>
        <addColumn tableName="success_indicator">
            <column name="generate_early_alert" type="boolean" defaultValue="false">
                <constraints nullable="false" />
            </column>
        </addColumn>
        <rollback>
            <dropColumn tableName="success_indicator" columnName="show_in_caseload" />
            <dropColumn tableName="success_indicator" columnName="generate_early_alert" />
        </rollback>
    </changeSet>

    <changeSet author="paul.spaude" id="add config success indicator count" >
        <insert tableName="config">
            <column name="id" value="1f256df0-a9ef-4190-923b-e94935f6abd0" />
            <column name="name" value="task_count_success_indicators_trigger" />
            <column name="description"
                    value="Frequency at which the job that examines all students for configured Success Indicators and generates a count or alert is run. Specify a number to run the job every x-many milliseconds. Or specify two numbers separated by a slash (60000/1000) to represent both a period and an initial offset. Or specify a cron expression. See http://www.manpagez.com/man/5/crontab/ for cron expression syntax. Default value means 'daily at 3AM, server-local time.'" />
            <column name="value">0 0 3 * * *</column>
            <column name="default_value">0 0 3 * * *</column>
            <column name="created_date" valueDate="2016-10-28T12:00:00" />
            <column name="modified_date" valueDate="2016-10-28T12:00:00" />
            <column name="created_by" value="58ba5ee3-734e-4ae9-b9c5-943774b4de41" />
            <column name="modified_by" value="58ba5ee3-734e-4ae9-b9c5-943774b4de41" />
            <column name="object_status" value="1" />
            <column name="sort_order" value="206" />
        </insert>
        <rollback>
            <delete tableName="config">
                <where>id='1f256df0-a9ef-4190-923b-e94935f6abd0'</where>
            </delete>
        </rollback>
    </changeSet>

    <changeSet id="create person_success_indicator_count table" author="paul.spaude">
        <createTable tableName="person_success_indicator_count">
            <column name="id" type="uuid">
                <constraints primaryKey="true" nullable="false" />
            </column>
            <column name="created_date" type="datetime">
                <constraints nullable="false" />
            </column>
            <column name="modified_date" type="datetime" />
            <column name="created_by" type="uuid">
                <constraints nullable="false" foreignKeyName="person_success_indicator_count_created_by_person_id"
                             references="person(id)" />
            </column>
            <column name="modified_by" type="uuid">
                <constraints nullable="true" foreignKeyName="person_success_indicator_count_modified_by_person_id"
                             references="person(id)" />
            </column>
            <column name="object_status" type="int">
                <constraints nullable="false" />
            </column>
            <column name="person_id" type="uuid">
                <constraints nullable="false" foreignKeyName="person_success_indicator_count_person_id"
                             references="person(id)" />
            </column>
            <column name="low_count" type="integer">
                <constraints nullable="true" />
            </column>
            <column name="medium_count" type="integer">
                <constraints nullable="true" />
            </column>
            <column name="high_count" type="integer">
                <constraints nullable="true" />
            </column>
            <column name="low_alert_count" type="integer">
                <constraints nullable="true" />
            </column>
        </createTable>
        <sql>grant all on person_success_indicator_count to ${database.app.username}</sql>
        <rollback>
            <dropTable tableName="person_success_indicator_count" />
        </rollback>
    </changeSet>

    <!-- Below handles adding the new fields to directory person -->

    <changeSet dbms="mssql" id="create low success count function for mssql" author="paul.spaude">
        <sql><![CDATA[
            CREATE FUNCTION ${schema}.GET_LOW_SUCCESS_COUNT(@input uniqueidentifier) RETURNS INTEGER
            AS BEGIN
              DECLARE @lowCount INTEGER
                set @lowCount = (select top 1 low_count from ${schema}.person_success_indicator_count psic where psic.person_id=@input and psic.object_status = 1 order by modified_date desc)
            RETURN @lowCount
            END;
        ]]></sql>
    </changeSet>

    <changeSet dbms="postgresql" id="create low success count function for postgresql" author="paul.spaude">
        <sql><![CDATA[
            create or replace function ${schema}.GET_LOW_SUCCESS_COUNT(uuid) RETURNS INTEGER as $$
                select low_count from ${schema}.person_success_indicator_count psic where psic.person_id=$1 and psic.object_status = 1 order by modified_date desc limit 1
            $$ LANGUAGE SQL STRICT;
        ]]></sql>
    </changeSet>

    <changeSet dbms="mssql" id="create medium success count function for mssql" author="paul.spaude">
        <sql><![CDATA[
            CREATE FUNCTION ${schema}.GET_MEDIUM_SUCCESS_COUNT(@input uniqueidentifier) RETURNS INTEGER
            AS BEGIN
              DECLARE @medCount INTEGER
                set @medCount = (select top 1 medium_count from ${schema}.person_success_indicator_count psic where psic.person_id=@input and psic.object_status = 1 order by modified_date desc)
            RETURN @medCount
            END;
        ]]></sql>
    </changeSet>

    <changeSet dbms="postgresql" id="create medium success count function for postgresql" author="paul.spaude">
        <sql><![CDATA[
            create or replace function ${schema}.GET_MEDIUM_SUCCESS_COUNT(uuid) RETURNS INTEGER as $$
                select medium_count from ${schema}.person_success_indicator_count psic where psic.person_id=$1 and psic.object_status = 1 order by modified_date desc limit 1
            $$ LANGUAGE SQL STRICT;
        ]]></sql>
    </changeSet>

    <changeSet  id="add indicator counts to v_directory_person" author="paul.spaude">

        <dropView viewName="v_directory_person" schemaName="${schema}"/>
        <sql><![CDATA[
        create view ${schema}.v_directory_person AS select
            COALESCE(p.school_id, ep.school_id) as id,
            p.id as person_id,
            COALESCE(p.school_id, ep.school_id) as school_id,
            COALESCE(p.username, ep.username) as username,
            COALESCE(p.first_name, ep.first_name) as first_name,
            COALESCE(p.middle_name, ep.middle_name) as middle_name,
            COALESCE(p.last_name, ep.last_name) as last_name,
            COALESCE(p.birth_date, ep.birth_date) as birth_date,
            COALESCE(p.primary_email_address, ep.primary_email_address) as primary_email_address,
            COALESCE(p.address_line_1, ep.address_line_1) as address_line_1,
            COALESCE(p.address_line_2, ep.address_line_2) as address_line_2,
            COALESCE(p.city, ep.city) as city,
            COALESCE(p.state, ep.state) as state,
            COALESCE(p.zip_code, ep.zip_code) as zip_code,
            COALESCE(p.home_phone, ep.home_phone) as home_phone,
            COALESCE(p.work_phone, ep.work_phone) as work_phone,
            COALESCE(p.actual_start_term, ep.actual_start_term) as actual_start_term,
            COALESCE(p.actual_start_year, ep.actual_start_year) as actual_start_year,
            COALESCE(p.cell_phone, ep.cell_phone) as cell_phone,
            COALESCE(p.photo_url, ep.photo_url) as photo_url,
            COALESCE(p.residency_county, ep.residency_county) as residency_county,
            COALESCE(p.f1_status, ep.f1_status) as f1_status,
            COALESCE(p.coach_id, ${schema}.GET_PERSON_ID_FROM_SCHOOL_ID(ep.coach_school_id)) as coach_id,
            ${schema}.GET_PERSON_FIRST_NAME_FROM_ID(COALESCE(p.coach_id, ${schema}.GET_PERSON_ID_FROM_SCHOOL_ID(ep.coach_school_id))) as coach_first_name,
            ${schema}.GET_PERSON_LAST_NAME_FROM_ID(COALESCE(p.coach_id, ${schema}.GET_PERSON_ID_FROM_SCHOOL_ID(ep.coach_school_id))) as coach_last_name,
            ${schema}.GET_STUDENT_TYPE_NAME_FROM_ID(COALESCE(p.student_type_id, ${schema}.GET_STUDENT_TYPE_ID_FROM_CODE(ep.student_type_code))) as student_type_name,
            p.student_intake_complete_date as student_intake_complete_date,
            ${schema}.GET_PROGRAM_STATUS_NAME_FROM_ID(${schema}.GET_PROGRAM_STATUS_FROM_PERSON_ID(p.id)) as program_status_name,
            est.credit_hours_earned as credit_hours_earned,
            esfa.sap_status_code as sap_status_code,
            est.grade_point_average as grade_point_average,
            ${schema}.ACTIVE_EARLY_ALERT_FORMULA(p.id) as active_alerts_count,
            ${schema}.INACTIVE_EARLY_ALERT_FORMULA(p.id) as closed_alerts_count,
            ${schema}.GET_EARLY_ALERT_RESPONSE_DUE_COUNT(${schema}.GET_EARLY_ALERT_RESPONSE_DATE(),p.id) as early_alert_response_due_count,
            ${schema}.GET_EARLY_ALERT_RESPONSE_CURRENT_COUNT(${schema}.GET_EARLY_ALERT_RESPONSE_DATE(),p.id) as early_alert_response_current_count,
            ${schema}.CURRENT_REGISTRATION_STATUS(ep.school_id, ${schema}.CURRENT_TERM_CODE()) as current_registration_status,
            p.object_status as object_status,
            est.local_gpa as local_gpa,
            est.program_gpa as program_gpa,
            p.secondary_email_address as secondary_email_address,
            ep.coach_school_id as coach_school_id,
            ${schema}.GET_CAMPUS_NAME_FROM_ID(COALESCE(p.campus_id, ${schema}.GET_CAMPUS_ID_FROM_CODE(ep.campus_code))) as campus_name,
            ${schema}.CURRENT_REGISTRATION_STATUS(ep.school_id, ${schema}.NEXT_TERM_CODE()) as next_term_registration_status,
            ${schema}.GET_LOW_SUCCESS_COUNT(p.id) as config_low_indicators_count,
            ${schema}.GET_MEDIUM_SUCCESS_COUNT(p.id) as config_med_indicators_count
            from external_person as ep FULL OUTER JOIN
            person as p on ep.school_id = p.school_id
            LEFT OUTER JOIN ${schema}.external_student_transcript as est on ep.school_id = est.school_id
            LEFT OUTER JOIN ${schema}.external_student_financial_aid as esfa on ep.school_id = esfa.school_id
            LEFT OUTER JOIN ${schema}.external_person_planning_status as esps on ep.school_id = esps.school_id;
            grant all on ${schema}.v_directory_person to ${database.app.username};
          ]]></sql>
        <addColumn tableName="mv_directory_person" schemaName="${schema}">
            <column name="config_low_indicators_count" type="integer"></column>
        </addColumn>
        <addColumn tableName="mv_directory_person" schemaName="${schema}">
            <column name="config_med_indicators_count" type="integer"></column>
        </addColumn>
        <addColumn tableName="mv_directory_person_blue" schemaName="${schema}">
            <column name="config_low_indicators_count" type="integer"></column>
        </addColumn>
        <addColumn tableName="mv_directory_person_blue" schemaName="${schema}">
            <column name="config_med_indicators_count" type="integer"></column>
        </addColumn>
    </changeSet>

    <changeSet dbms="postgresql" id="add indicator counts on person trigger psql" author="paul.spaude">
        <sql splitStatements="false"><![CDATA[
            CREATE OR REPLACE FUNCTION ${schema}.update_directory_person_from_view_where_school_id()
            RETURNS TRIGGER AS $$
            DECLARE oldSchoolId varchar(50);
            BEGIN
        		IF (TG_OP = 'INSERT') THEN
		            oldSchoolId = NEW.school_id;
		        ELSE
		            oldSchoolId = OLD.school_id;
		        END IF;

                IF (TG_OP = 'UPDATE') OR EXISTS (SELECT 1 FROM ${schema}.mv_directory_person WHERE school_id = NEW.school_id) THEN
                    UPDATE ${schema}.mv_directory_person SET
                        id =                        subquery.id,
                        person_id =                 subquery.person_id,
                        object_status =             subquery.object_status,
                        school_id =                 subquery.school_id,
                        username =                  subquery.username,
                        first_name =                subquery.first_name,
                        middle_name =               subquery.middle_name,
                        last_name =                 subquery.last_name,
                        birth_date =                subquery.birth_date,
                        primary_email_address =     subquery.primary_email_address,
                        secondary_email_address =   subquery.secondary_email_address,
                        address_line_1 =            subquery.address_line_1,
                        address_line_2 =            subquery.address_line_2,
                        city =                      subquery.city,
                        state =                     subquery.state,
                        zip_code =                  subquery.zip_code,
                        home_phone =                subquery.home_phone,
                        work_phone =                subquery.work_phone,
                        actual_start_term =         subquery.actual_start_term,
                        actual_start_year =         subquery.actual_start_year,
                        cell_phone =                subquery.cell_phone,
                        photo_url =                 subquery.photo_url,
                        residency_county =          subquery.residency_county,
                        f1_status =                 subquery.f1_status,
                        coach_id =                  subquery.coach_id,
                        coach_school_id =           subquery.coach_school_id,
                        coach_first_name =          subquery.coach_first_name,
                        coach_last_name =           subquery.coach_last_name,
                        student_type_name =         subquery.student_type_name,
                        student_intake_complete_date = subquery.student_intake_complete_date,
                        program_status_name =       subquery.program_status_name,
                        credit_hours_earned =       subquery.credit_hours_earned,
                        sap_status_code =           subquery.sap_status_code,
                        grade_point_average =       subquery.grade_point_average,
                        local_gpa =                 subquery.local_gpa,
                        program_gpa =               subquery.program_gpa,
                        active_alerts_count =       subquery.active_alerts_count,
                        closed_alerts_count =       subquery.closed_alerts_count,
                        early_alert_response_due_count = subquery.early_alert_response_due_count,
                        early_alert_response_current_count = subquery.early_alert_response_current_count,
                        current_registration_status = subquery.current_registration_status,
                        campus_name =               subquery.campus_name,
                        next_term_registration_status = subquery.next_term_registration_status,
                        config_low_indicators_count = subquery.config_low_indicators_count,
                        config_med_indicators_count = subquery.config_med_indicators_count
                    FROM (
                        SELECT
                            vpd.id,
                            vpd.person_id,
                            vpd.object_status,
                            vpd.school_id,
                            vpd.username,
                            vpd.first_name,
                            vpd.middle_name,
                            vpd.last_name,
                            vpd.birth_date,
                            vpd.primary_email_address,
                            vpd.secondary_email_address,
                            vpd.address_line_1,
                            vpd.address_line_2,
                            vpd.city,
                            vpd.state,
                            vpd.zip_code,
                            vpd.home_phone,
                            vpd.work_phone,
                            vpd.actual_start_term,
                            vpd.actual_start_year,
                            vpd.cell_phone,
                            vpd.photo_url,
                            vpd.residency_county,
                            vpd.f1_status,
                            vpd.coach_id,
                            vpd.coach_school_id,
                            vpd.coach_first_name,
                            vpd.coach_last_name,
                            vpd.student_type_name,
                            vpd.student_intake_complete_date,
                            vpd.program_status_name,
                            vpd.credit_hours_earned,
                            vpd.sap_status_code,
                            vpd.grade_point_average,
                            vpd.local_gpa,
                            vpd.program_gpa,
                            vpd.active_alerts_count,
                            vpd.closed_alerts_count,
                            vpd.early_alert_response_due_count,
                            vpd.early_alert_response_current_count,
                            vpd.current_registration_status,
                            vpd.campus_name,
                            vpd.next_term_registration_status,
                            vpd.config_low_indicators_count,
                            vpd.config_med_indicators_count
                        FROM  ${schema}.v_directory_person AS vpd WHERE vpd.id=NEW.school_id) AS subquery
                        WHERE ${schema}.mv_directory_person.id=oldSchoolId;
                ELSIF NOT EXISTS (SELECT 1 FROM ${schema}.mv_directory_person WHERE school_id = NEW.school_id) THEN
                    INSERT INTO ${schema}.mv_directory_person(
                        id,
                        person_id,
                        object_status,
                        school_id,
                        username,
                        first_name,
                        middle_name,
                        last_name,
                        birth_date,
                        primary_email_address,
                        secondary_email_address,
                        address_line_1,
                        address_line_2,
                        city,
                        state,
                        zip_code,
                        home_phone,
                        work_phone,
                        actual_start_term,
                        actual_start_year,
                        cell_phone,
                        photo_url,
                        residency_county,
                        f1_status,
                        coach_id,
                        coach_school_id,
                        coach_first_name,
                        coach_last_name,
                        student_type_name,
                        student_intake_complete_date,
                        program_status_name,
                        credit_hours_earned,
                        sap_status_code,
                        grade_point_average,
                        local_gpa,
                        program_gpa,
                        active_alerts_count,
                        closed_alerts_count,
                        early_alert_response_due_count,
                        early_alert_response_current_count,
                        current_registration_status,
                        campus_name,
                        next_term_registration_status,
                        config_low_indicators_count,
                        config_med_indicators_count
                    ) (SELECT
                        vpd.id,
                        vpd.person_id,
                        vpd.object_status,
                        vpd.school_id,
                        vpd.username,
                        vpd.first_name,
                        vpd.middle_name,
                        vpd.last_name,
                        vpd.birth_date,
                        vpd.primary_email_address,
                        vpd.secondary_email_address,
                        vpd.address_line_1,
                        vpd.address_line_2,
                        vpd.city,
                        vpd.state,
                        vpd.zip_code,
                        vpd.home_phone,
                        vpd.work_phone,
                        vpd.actual_start_term,
                        vpd.actual_start_year,
                        vpd.cell_phone,
                        vpd.photo_url,
                        vpd.residency_county,
                        vpd.f1_status,
                        vpd.coach_id,
                        vpd.coach_school_id,
                        vpd.coach_first_name,
                        vpd.coach_last_name,
                        vpd.student_type_name,
                        vpd.student_intake_complete_date,
                        vpd.program_status_name,
                        vpd.credit_hours_earned,
                        vpd.sap_status_code,
                        vpd.grade_point_average,
                        vpd.local_gpa,
                        vpd.program_gpa,
                        vpd.active_alerts_count,
                        vpd.closed_alerts_count,
                        vpd.early_alert_response_due_count,
                        vpd.early_alert_response_current_count,
                        vpd.current_registration_status,
                        vpd.campus_name,
                        vpd.next_term_registration_status,
                        vpd.config_low_indicators_count,
                        vpd.config_med_indicators_count
                    FROM  ${schema}.v_directory_person AS vpd WHERE vpd.id=NEW.school_id);
                END IF;
                RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
        ]]></sql>
    </changeSet>

    <!-- Changes: On UPDATE utilizing the NEW.person_id value instead of subquery since that didn't work.
          However, this is called by early_alert, and the Person should always exist which is enforced by constraints.
          Both UPDATE and INSERT trigger ops need to perform the same UPDATE command. The INSERT was added
          from the person table trigger in case it's somehow utilized. The conditional was subsequently changed to
          rely on the person_id existing in mv_directory_person table. -->
    <changeSet dbms="postgresql" id="add success indicators count on ea trigger psql" author="paul.spaude">
        <sql splitStatements="false"><![CDATA[
            CREATE OR REPLACE FUNCTION ${schema}.update_directory_person_from_view_where_person_id()
            RETURNS TRIGGER AS $$
            BEGIN
		        IF EXISTS (SELECT 1 FROM ${schema}.mv_directory_person WHERE person_id = NEW.person_id) THEN
                    UPDATE ${schema}.mv_directory_person SET
                        id =                        subquery.id,
                        object_status =             subquery.object_status,
                        person_id =                 subquery.person_id,
                        school_id =                 subquery.school_id,
                        username =                  subquery.username,
                        first_name =                subquery.first_name,
                        middle_name =               subquery.middle_name,
                        last_name =                 subquery.last_name,
                        birth_date =                subquery.birth_date,
                        primary_email_address =     subquery.primary_email_address,
                        secondary_email_address =   subquery.secondary_email_address,
                        address_line_1 =            subquery.address_line_1,
                        address_line_2 =            subquery.address_line_2,
                        city =                      subquery.city,
                        state =                     subquery.state,
                        zip_code =                  subquery.zip_code,
                        home_phone =                subquery.home_phone,
                        work_phone =                subquery.work_phone,
                        actual_start_term =         subquery.actual_start_term,
                        actual_start_year =         subquery.actual_start_year,
                        cell_phone =                subquery.cell_phone,
                        photo_url =                 subquery.photo_url,
                        residency_county =          subquery.residency_county,
                        f1_status =                 subquery.f1_status,
                        coach_id =                  subquery.coach_id,
                        coach_school_id =           subquery.coach_school_id,
                        coach_first_name =          subquery.coach_first_name,
                        coach_last_name =           subquery.coach_last_name,
                        student_type_name =         subquery.student_type_name,
                        student_intake_complete_date = subquery.student_intake_complete_date,
                        program_status_name =       subquery.program_status_name,
                        credit_hours_earned =       subquery.credit_hours_earned,
                        sap_status_code =           subquery.sap_status_code,
                        grade_point_average =       subquery.grade_point_average,
                        local_gpa =                 subquery.local_gpa,
                        program_gpa =               subquery.program_gpa,
                        active_alerts_count =       subquery.active_alerts_count,
                        closed_alerts_count =       subquery.closed_alerts_count,
                        early_alert_response_due_count = subquery.early_alert_response_due_count,
                        early_alert_response_current_count = subquery.early_alert_response_current_count,
                        current_registration_status = subquery.current_registration_status,
                        campus_name =               subquery.campus_name,
                        next_term_registration_status = subquery.next_term_registration_status,
                        config_low_indicators_count = subquery.config_low_indicators_count,
                        config_med_indicators_count = subquery.config_med_indicators_count
                    FROM (SELECT
                        vpd.id,
                        vpd.person_id,
                        vpd.object_status,
                        vpd.school_id,
                        vpd.username,
                        vpd.first_name,
                        vpd.middle_name,
                        vpd.last_name,
                        vpd.birth_date,
                        vpd.primary_email_address,
                        vpd.secondary_email_address,
                        vpd.address_line_1,
                        vpd.address_line_2,
                        vpd.city,
                        vpd.state,
                        vpd.zip_code,
                        vpd.home_phone,
                        vpd.work_phone,
                        vpd.actual_start_term,
                        vpd.actual_start_year,
                        vpd.cell_phone,
                        vpd.photo_url,
                        vpd.residency_county,
                        vpd.f1_status,
                        vpd.coach_id,
                        vpd.coach_school_id,
                        vpd.coach_first_name,
                        vpd.coach_last_name,
                        vpd.student_type_name,
                        vpd.student_intake_complete_date,
                        vpd.program_status_name,
                        vpd.credit_hours_earned,
                        vpd.sap_status_code,
                        vpd.grade_point_average,
                        vpd.local_gpa,
                        vpd.program_gpa,
                        vpd.active_alerts_count,
                        vpd.closed_alerts_count,
                        vpd.early_alert_response_due_count,
                        vpd.early_alert_response_current_count,
                        vpd.current_registration_status,
                        vpd.campus_name,
                        vpd.next_term_registration_status,
                        vpd.config_low_indicators_count,
                        vpd.config_med_indicators_count
                    FROM  ${schema}.v_directory_person AS vpd WHERE vpd.person_id=NEW.person_id) AS subquery
                    WHERE ${schema}.mv_directory_person.person_id=NEW.person_id;
                ELSIF NOT EXISTS (SELECT 1 FROM ${schema}.mv_directory_person WHERE person_id = NEW.person_id) THEN
                    INSERT INTO ${schema}.mv_directory_person(
                        id,
                        person_id,
                        object_status,
                        school_id,
                        username,
                        first_name,
                        middle_name,
                        last_name,
                        birth_date,
                        primary_email_address,
                        secondary_email_address,
                        address_line_1,
                        address_line_2,
                        city,
                        state,
                        zip_code,
                        home_phone,
                        work_phone,
                        actual_start_term,
                        actual_start_year,
                        cell_phone,
                        photo_url,
                        residency_county,
                        f1_status,
                        coach_id,
                        coach_school_id,
                        coach_first_name,
                        coach_last_name,
                        student_type_name,
                        student_intake_complete_date,
                        program_status_name,
                        credit_hours_earned,
                        sap_status_code,
                        grade_point_average,
                        local_gpa,
                        program_gpa,
                        active_alerts_count,
                        closed_alerts_count,
                        early_alert_response_due_count,
                        early_alert_response_current_count,
                        current_registration_status,
                        campus_name,
                        next_term_registration_status,
                        config_low_indicators_count,
                        config_med_indicators_count
                    ) (SELECT
                        vpd.id,
                        vpd.person_id,
                        vpd.object_status,
                        vpd.school_id,
                        vpd.username,
                        vpd.first_name,
                        vpd.middle_name,
                        vpd.last_name,
                        vpd.birth_date,
                        vpd.primary_email_address,
                        vpd.secondary_email_address,
                        vpd.address_line_1,
                        vpd.address_line_2,
                        vpd.city,
                        vpd.state,
                        vpd.zip_code,
                        vpd.home_phone,
                        vpd.work_phone,
                        vpd.actual_start_term,
                        vpd.actual_start_year,
                        vpd.cell_phone,
                        vpd.photo_url,
                        vpd.residency_county,
                        vpd.f1_status,
                        vpd.coach_id,
                        vpd.coach_school_id,
                        vpd.coach_first_name,
                        vpd.coach_last_name,
                        vpd.student_type_name,
                        vpd.student_intake_complete_date,
                        vpd.program_status_name,
                        vpd.credit_hours_earned,
                        vpd.sap_status_code,
                        vpd.grade_point_average,
                        vpd.local_gpa,
                        vpd.program_gpa,
                        vpd.active_alerts_count,
                        vpd.closed_alerts_count,
                        vpd.early_alert_response_due_count,
                        vpd.early_alert_response_current_count,
                        vpd.current_registration_status,
                        vpd.campus_name,
                        vpd.next_term_registration_status,
                        vpd.config_low_indicators_count,
                        vpd.config_med_indicators_count
                    FROM  ${schema}.v_directory_person AS vpd WHERE vpd.person_id=NEW.person_id);
                END IF;
                RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
        ]]></sql>
    </changeSet>

    <changeSet dbms="postgresql" id="add indicator count on ea_response trigger psql" author="paul.spaude">
        <sql splitStatements="false" ><![CDATA[
        CREATE OR REPLACE FUNCTION ${schema}.update_directory_person_from_view_where_early_alert_id()
            RETURNS TRIGGER AS $$
            DECLARE new_person_id uuid;
            BEGIN
                new_person_id = (SELECT ea.person_id FROM early_alert ea WHERE ea.id = NEW.early_alert_id);
		        IF EXISTS (SELECT 1 FROM ${schema}.mv_directory_person WHERE person_id = new_person_id) THEN
                    UPDATE ${schema}.mv_directory_person SET
                    id =                        subquery.id,
                    object_status =             subquery.object_status,
                    person_id =                 subquery.person_id,
                    school_id =                 subquery.school_id,
                    username =                  subquery.username,
                    first_name =                subquery.first_name,
                    middle_name =               subquery.middle_name,
                    last_name =                 subquery.last_name,
                    birth_date =                subquery.birth_date,
                    primary_email_address =     subquery.primary_email_address,
                    secondary_email_address =   subquery.secondary_email_address,
                    address_line_1 =            subquery.address_line_1,
                    address_line_2 =            subquery.address_line_2,
                    city =                      subquery.city,
                    state =                     subquery.state,
                    zip_code =                  subquery.zip_code,
                    home_phone =                subquery.home_phone,
                    work_phone =                subquery.work_phone,
                    actual_start_term =         subquery.actual_start_term,
                    actual_start_year =         subquery.actual_start_year,
                    cell_phone =                subquery.cell_phone,
                    photo_url =                 subquery.photo_url,
                    residency_county =          subquery.residency_county,
                    f1_status =                 subquery.f1_status,
                    coach_id =                  subquery.coach_id,
                    coach_school_id =           subquery.coach_school_id,
                    coach_first_name =          subquery.coach_first_name,
                    coach_last_name =           subquery.coach_last_name,
                    student_type_name =         subquery.student_type_name,
                    student_intake_complete_date = subquery.student_intake_complete_date,
                    program_status_name =       subquery.program_status_name,
                    credit_hours_earned =       subquery.credit_hours_earned,
                    sap_status_code =           subquery.sap_status_code,
                    grade_point_average =       subquery.grade_point_average,
                    local_gpa =                 subquery.local_gpa,
                    program_gpa =               subquery.program_gpa,
                    active_alerts_count =       subquery.active_alerts_count,
                    closed_alerts_count =       subquery.closed_alerts_count,
                    early_alert_response_due_count = subquery.early_alert_response_due_count,
                    early_alert_response_current_count = subquery.early_alert_response_current_count,
                    current_registration_status = subquery.current_registration_status,
                    campus_name =               subquery.campus_name,
                    next_term_registration_status = subquery.next_term_registration_status,
                    config_low_indicators_count = subquery.config_low_indicators_count,
                    config_med_indicators_count = subquery.config_med_indicators_count
                    FROM (SELECT
                        vpd.id,
                        vpd.object_status,
                        vpd.person_id,
                        vpd.school_id,
                        vpd.username,
                        vpd.first_name,
                        vpd.middle_name,
                        vpd.last_name,
                        vpd.birth_date,
                        vpd.primary_email_address,
                        vpd.secondary_email_address,
                        vpd.address_line_1,
                        vpd.address_line_2,
                        vpd.city,
                        vpd.state,
                        vpd.zip_code,
                        vpd.home_phone,
                        vpd.work_phone,
                        vpd.actual_start_term,
                        vpd.actual_start_year,
                        vpd.cell_phone,
                        vpd.photo_url,
                        vpd.residency_county,
                        vpd.f1_status,
                        vpd.coach_id,
                        vpd.coach_school_id,
                        vpd.coach_first_name,
                        vpd.coach_last_name,
                        vpd.student_type_name,
                        vpd.student_intake_complete_date,
                        vpd.program_status_name,
                        vpd.credit_hours_earned,
                        vpd.sap_status_code,
                        vpd.grade_point_average,
                        vpd.local_gpa,
                        vpd.program_gpa,
                        vpd.active_alerts_count,
                        vpd.closed_alerts_count,
                        vpd.early_alert_response_due_count,
                        vpd.early_alert_response_current_count,
                        vpd.current_registration_status,
                        vpd.campus_name,
                        vpd.next_term_registration_status,
                        vpd.config_low_indicators_count,
                        vpd.config_med_indicators_count
                    FROM  ${schema}.v_directory_person AS vpd
                        WHERE vpd.person_id=new_person_id) AS subquery
                    WHERE ${schema}.mv_directory_person.person_id=new_person_id;
                ELSIF NOT EXISTS (SELECT 1 FROM ${schema}.mv_directory_person WHERE person_id = new_person_id) THEN
                    INSERT INTO ${schema}.mv_directory_person(
                        id,
                        person_id,
                        object_status,
                        school_id,
                        username,
                        first_name,
                        middle_name,
                        last_name,
                        birth_date,
                        primary_email_address,
                        secondary_email_address,
                        address_line_1,
                        address_line_2,
                        city,
                        state,
                        zip_code,
                        home_phone,
                        work_phone,
                        actual_start_term,
                        actual_start_year,
                        cell_phone,
                        photo_url,
                        residency_county,
                        f1_status,
                        coach_id,
                        coach_school_id,
                        coach_first_name,
                        coach_last_name,
                        student_type_name,
                        student_intake_complete_date,
                        program_status_name,
                        credit_hours_earned,
                        sap_status_code,
                        grade_point_average,
                        local_gpa,
                        program_gpa,
                        active_alerts_count,
                        closed_alerts_count,
                        early_alert_response_due_count,
                        early_alert_response_current_count,
                        current_registration_status,
                        campus_name,
                        next_term_registration_status,
                        config_low_indicators_count,
                        config_med_indicators_count
                    ) (SELECT
                        vpd.id,
                        vpd.person_id,
                        vpd.object_status,
                        vpd.school_id,
                        vpd.username,
                        vpd.first_name,
                        vpd.middle_name,
                        vpd.last_name,
                        vpd.birth_date,
                        vpd.primary_email_address,
                        vpd.secondary_email_address,
                        vpd.address_line_1,
                        vpd.address_line_2,
                        vpd.city,
                        vpd.state,
                        vpd.zip_code,
                        vpd.home_phone,
                        vpd.work_phone,
                        vpd.actual_start_term,
                        vpd.actual_start_year,
                        vpd.cell_phone,
                        vpd.photo_url,
                        vpd.residency_county,
                        vpd.f1_status,
                        vpd.coach_id,
                        vpd.coach_school_id,
                        vpd.coach_first_name,
                        vpd.coach_last_name,
                        vpd.student_type_name,
                        vpd.student_intake_complete_date,
                        vpd.program_status_name,
                        vpd.credit_hours_earned,
                        vpd.sap_status_code,
                        vpd.grade_point_average,
                        vpd.local_gpa,
                        vpd.program_gpa,
                        vpd.active_alerts_count,
                        vpd.closed_alerts_count,
                        vpd.early_alert_response_due_count,
                        vpd.early_alert_response_current_count,
                        vpd.current_registration_status,
                        vpd.campus_name,
                        vpd.next_term_registration_status,
                        config_low_indicators_count,
                        config_med_indicators_count
                    FROM  ${schema}.v_directory_person AS vpd WHERE vpd.person_id=new_person_id);
                END IF;
                RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;
        ]]></sql>
    </changeSet>

    <!-- Dropping existing mssql trigger will re-add below. Intentionally leaving other triggers alone
           because we know they work and to reduce the chances of MERGE causing unnecessary complications.
            In the future if problems are noted, we'll need to alter the other two MSSQL triggers. -->
    <changeSet dbms="mssql" id="drop trigger directory_person mssql" author="paul.spaude">
        <sql splitStatements="false"><![CDATA[
                DROP TRIGGER ${schema}.tr_insert_directory_person_person;;
        ]]></sql>
    </changeSet>

    <!-- Changes: Using a Merge to handle the 3 cases on person table listed at the top of this file.
           Merge brings it's own complications, but it's more performant than the previous cursor and
             there was no easy way to handle passing two or more values while switching on the 3 conditional cases
             with multiple records affected by a single statement. -->
    <changeSet dbms="mssql" id="add success indicator counts on trigger mssql" author="paul.spaude">
        <sql splitStatements="false"><![CDATA[
            CREATE TRIGGER ${schema}.tr_insert_directory_person_person on ${schema}.person FOR INSERT, UPDATE AS
                IF ${schema}.DIRECTORY_PERSON_REFRESH_RUNNING() = 0
                BEGIN
					MERGE INTO ${schema}.mv_directory_person AS TARGET
					USING
						(SELECT
							vdp.*
						FROM ${schema}.v_directory_person vdp
						INNER JOIN inserted i ON vdp.id = i.school_id
						) AS SOURCE
						ON TARGET.id = SOURCE.id
					WHEN MATCHED THEN
						UPDATE SET
							TARGET.id =                        SOURCE.id,
							TARGET.object_status =             SOURCE.object_status,
							TARGET.person_id =                 SOURCE.person_id,
							TARGET.school_id =                 SOURCE.school_id,
							TARGET.username =                  SOURCE.username,
							TARGET.first_name =                SOURCE.first_name,
							TARGET.middle_name =               SOURCE.middle_name,
							TARGET.last_name =                 SOURCE.last_name,
							TARGET.birth_date =                SOURCE.birth_date,
							TARGET.primary_email_address =     SOURCE.primary_email_address,
							TARGET.secondary_email_address =   SOURCE.secondary_email_address,
							TARGET.address_line_1 =            SOURCE.address_line_1,
							TARGET.address_line_2 =            SOURCE.address_line_2,
							TARGET.city =                      SOURCE.city,
							TARGET.state =                     SOURCE.state,
							TARGET.zip_code =                  SOURCE.zip_code,
							TARGET.home_phone =                SOURCE.home_phone,
							TARGET.work_phone =                SOURCE.work_phone,
							TARGET.actual_start_term =         SOURCE.actual_start_term,
							TARGET.actual_start_year =         SOURCE.actual_start_year,
							TARGET.cell_phone =                SOURCE.cell_phone,
							TARGET.photo_url =                 SOURCE.photo_url,
							TARGET.residency_county =          SOURCE.residency_county,
							TARGET.f1_status =                 SOURCE.f1_status,
							TARGET.coach_id =                  SOURCE.coach_id,
							TARGET.coach_school_id =           SOURCE.coach_school_id,
							TARGET.coach_first_name =          SOURCE.coach_first_name,
							TARGET.coach_last_name =           SOURCE.coach_last_name,
							TARGET.student_type_name =         SOURCE.student_type_name,
							TARGET.student_intake_complete_date = SOURCE.student_intake_complete_date,
							TARGET.program_status_name =       SOURCE.program_status_name,
							TARGET.credit_hours_earned =       SOURCE.credit_hours_earned,
							TARGET.sap_status_code =           SOURCE.sap_status_code,
							TARGET.grade_point_average =       SOURCE.grade_point_average,
							TARGET.local_gpa =                 SOURCE.local_gpa,
							TARGET.program_gpa =               SOURCE.program_gpa,
							TARGET.active_alerts_count =       SOURCE.active_alerts_count,
							TARGET.closed_alerts_count =       SOURCE.closed_alerts_count,
							TARGET.early_alert_response_due_count = SOURCE.early_alert_response_due_count,
							TARGET.early_alert_response_current_count = SOURCE.early_alert_response_current_count,
							TARGET.current_registration_status = SOURCE.current_registration_status,
							TARGET.campus_name =               SOURCE.campus_name,
							TARGET.next_term_registration_status = SOURCE.next_term_registration_status,
							TARGET.config_low_indicators_count = SOURCE.config_low_indicators_count,
                            TARGET.config_med_indicators_count = SOURCE.config_med_indicators_count
					WHEN NOT MATCHED BY TARGET THEN
						INSERT (
							id,
							person_id,
							object_status,
							school_id,
							username,
							first_name,
							middle_name,
							last_name,
							birth_date,
							primary_email_address,
							secondary_email_address,
							address_line_1,
							address_line_2,
							city,
							state,
							zip_code,
							home_phone,
							work_phone,
							actual_start_term,
							actual_start_year,
							cell_phone,
							photo_url,
							residency_county,
							f1_status,
							coach_id,
							coach_school_id,
							coach_first_name,
							coach_last_name,
							student_type_name,
							student_intake_complete_date,
							program_status_name,
							credit_hours_earned,
							sap_status_code,
							grade_point_average,
							local_gpa,
							program_gpa,
							active_alerts_count,
							closed_alerts_count,
							early_alert_response_due_count,
							early_alert_response_current_count,
							current_registration_status,
							campus_name,
							next_term_registration_status,
							config_low_indicators_count,
                            config_med_indicators_count
						) VALUES (
							SOURCE.id,
							SOURCE.person_id,
							SOURCE.object_status,
							SOURCE.school_id,
							SOURCE.username,
							SOURCE.first_name,
							SOURCE.middle_name,
							SOURCE.last_name,
							SOURCE.birth_date,
							SOURCE.primary_email_address,
							SOURCE.secondary_email_address,
							SOURCE.address_line_1,
							SOURCE.address_line_2,
							SOURCE.city,
							SOURCE.state,
							SOURCE.zip_code,
							SOURCE.home_phone,
							SOURCE.work_phone,
							SOURCE.actual_start_term,
							SOURCE.actual_start_year,
							SOURCE.cell_phone,
							SOURCE.photo_url,
							SOURCE.residency_county,
							SOURCE.f1_status,
							SOURCE.coach_id,
							SOURCE.coach_school_id,
							SOURCE.coach_first_name,
							SOURCE.coach_last_name,
							SOURCE.student_type_name,
							SOURCE.student_intake_complete_date,
							SOURCE.program_status_name,
							SOURCE.credit_hours_earned,
							SOURCE.sap_status_code,
							SOURCE.grade_point_average,
							SOURCE.local_gpa,
							SOURCE.program_gpa,
							SOURCE.active_alerts_count,
							SOURCE.closed_alerts_count,
							SOURCE.early_alert_response_due_count,
							SOURCE.early_alert_response_current_count,
							SOURCE.current_registration_status,
							SOURCE.campus_name,
							SOURCE.next_term_registration_status,
                            SOURCE.config_low_indicators_count,
                            SOURCE.config_med_indicators_count);
                END;
        ]]></sql>
    </changeSet>

    <!-- End adding new fields to directory person -->


    <!-- This next section handles updating the next_term triggers which were failing in certain scenarios -->

    <!-- changeSet dbms="postgresql" id="create directory person view functions postgres" author="michael.sultzaberger">
        <sql ><![CDATA[
            create or replace function ${schema}.NEXT_TERM_CODE() RETURNS CHARACTER VARYING as $$
            select code from external_term next_term where next_term.start_date > (select term.end_date from external_term term where term.start_date < current_date and term.end_date > current_date) order by next_term.start_date asc limit 1
            $$ LANGUAGE SQL STRICT;
        ]]></sql>
    </changeSet>

    <changeSet dbms="mssql" id="create directory person view functions sqlserver" author="michael.sultzaberger">
        <sql><![CDATA[
            CREATE FUNCTION ${schema}.NEXT_TERM_CODE() RETURNS VARCHAR(25)
            AS BEGIN
            DECLARE @code VARCHAR(25)
            set @code = (
                select top 1 code from external_term next_term where next_term.start_date > (select term.end_date from external_term term where term.start_date < GetDate() and term.end_date > GetDate()) order by next_term.start_date asc
            )
            RETURN @code
            END;
        ]]></sql>
    </changeSet -->

    <!-- End handling updating next_term triggers -->


</databaseChangeLog>